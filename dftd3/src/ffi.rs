//! FFI bindings for simple-dftd3.

#![allow(non_camel_case_types)]

use core::ffi::{c_char, c_int};

/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dftd3_error {
    _unused: [u8; 0],
}
#[doc = " Error handle class"]
pub type dftd3_error = *mut _dftd3_error;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dftd3_structure {
    _unused: [u8; 0],
}
#[doc = " Molecular structure data class"]
pub type dftd3_structure = *mut _dftd3_structure;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dftd3_model {
    _unused: [u8; 0],
}
#[doc = " Dispersion model class"]
pub type dftd3_model = *mut _dftd3_model;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dftd3_param {
    _unused: [u8; 0],
}
#[doc = " Damping parameter class"]
pub type dftd3_param = *mut _dftd3_param;
unsafe extern "C" {
    #[doc = " Obtain library version as major * 10000 + minor * 100 + patch"]
    pub fn dftd3_get_version() -> c_int;
    #[doc = " Create new error handle object"]
    pub fn dftd3_new_error() -> dftd3_error;
    #[doc = " Check error handle status"]
    pub fn dftd3_check_error(arg1: dftd3_error) -> c_int;
    #[doc = " Get error message from error handle"]
    pub fn dftd3_get_error(arg1: dftd3_error, arg2: *mut c_char, arg3: *const c_int);
    #[doc = " Delete error handle object"]
    pub fn dftd3_delete_error(arg1: *mut dftd3_error);
    #[doc = " Create new molecular structure data (quantities in Bohr)"]
    pub fn dftd3_new_structure(
        arg1: dftd3_error,
        arg2: c_int,
        arg3: *const c_int,
        arg4: *const f64,
        arg5: *const f64,
        arg6: *const bool,
    ) -> dftd3_structure;
    #[doc = " Delete molecular structure data"]
    pub fn dftd3_delete_structure(arg1: *mut dftd3_structure);
    #[doc = " Update coordinates and lattice parameters (quantities in Bohr)"]
    pub fn dftd3_update_structure(
        arg1: dftd3_error,
        arg2: dftd3_structure,
        arg3: *const f64,
        arg4: *const f64,
    );
    #[doc = " Create new D3 dispersion model"]
    pub fn dftd3_new_d3_model(arg1: dftd3_error, arg2: dftd3_structure) -> dftd3_model;
    #[doc = " Set realspace cutoffs (quantities in Bohr)"]
    pub fn dftd3_set_model_realspace_cutoff(
        arg1: dftd3_error,
        arg2: dftd3_model,
        arg3: f64,
        arg4: f64,
        arg5: f64,
    );
    #[doc = " Delete dispersion model"]
    pub fn dftd3_delete_model(arg1: *mut dftd3_model);
    #[doc = " Create new zero damping parameters"]
    pub fn dftd3_new_zero_damping(
        arg1: dftd3_error,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> dftd3_param;
    #[doc = " Load zero damping parameters from internal storage"]
    pub fn dftd3_load_zero_damping(arg1: dftd3_error, arg2: *mut c_char, arg3: bool)
        -> dftd3_param;
    #[doc = " Create new rational damping parameters"]
    pub fn dftd3_new_rational_damping(
        arg1: dftd3_error,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> dftd3_param;
    #[doc = " Load rational damping parameters from internal storage"]
    pub fn dftd3_load_rational_damping(
        arg1: dftd3_error,
        arg2: *mut c_char,
        arg3: bool,
    ) -> dftd3_param;
    #[doc = " Create new modified zero damping parameters"]
    pub fn dftd3_new_mzero_damping(
        arg1: dftd3_error,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
    ) -> dftd3_param;
    #[doc = " Load modified zero damping parameters from internal storage"]
    pub fn dftd3_load_mzero_damping(
        arg1: dftd3_error,
        arg2: *mut c_char,
        arg3: bool,
    ) -> dftd3_param;
    #[doc = " Create new modified rational damping parameters"]
    pub fn dftd3_new_mrational_damping(
        arg1: dftd3_error,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
    ) -> dftd3_param;
    #[doc = " Load modified rational damping parameters from internal storage"]
    pub fn dftd3_load_mrational_damping(
        arg1: dftd3_error,
        arg2: *mut c_char,
        arg3: bool,
    ) -> dftd3_param;
    #[doc = " Create new optimized power damping parameters"]
    pub fn dftd3_new_optimizedpower_damping(
        arg1: dftd3_error,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
    ) -> dftd3_param;
    #[doc = " Load optimized power damping parameters from internal storage"]
    pub fn dftd3_load_optimizedpower_damping(
        arg1: dftd3_error,
        arg2: *mut c_char,
        arg3: bool,
    ) -> dftd3_param;
    #[doc = " Delete damping parameters"]
    pub fn dftd3_delete_param(arg1: *mut dftd3_param);
    #[doc = " Evaluate the dispersion energy and its derivatives"]
    pub fn dftd3_get_dispersion(
        arg1: dftd3_error,
        arg2: dftd3_structure,
        arg3: dftd3_model,
        arg4: dftd3_param,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut f64,
    );
    #[doc = " Evaluate the pairwise representation of the dispersion energy"]
    pub fn dftd3_get_pairwise_dispersion(
        arg1: dftd3_error,
        arg2: dftd3_structure,
        arg3: dftd3_model,
        arg4: dftd3_param,
        arg5: *mut f64,
        arg6: *mut f64,
    );
}
